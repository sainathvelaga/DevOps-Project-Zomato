pipeline {
    agent {
        label 'AGENT-1'
    }
    // tools {
    //     jdk 'jdk17'
    //     nodejs 'node23'
    // }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git Checkout") {
            steps {
                git 'https://github.com/sainathvelaga/DevOps-Project-Zomato.git'
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \
                    -Dsonar.projectKey=zomato '''
                }
            }
        }
        stage("Code Quality Gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
    }
}
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato kastrov/zomato:latest "
                        sh "docker push kastrov/zomato:latest "
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh 'docker-scout quickview kastrov/zomato:latest'
                       sh 'docker-scout cves kastrov/zomato:latest'
                       sh 'docker-scout recommendations kastrov/zomato:latest'
                   }
                }
            }
        }
        // stage('Analyze image') {
        //     steps {
        //         // Install Docker Scout
        //         sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'
                
        //         // Log into Docker Hub
        //         sh 'echo $DOCKER_HUB_PAT | docker login -u $DOCKER_HUB_USER --password-stdin'

        //         // Analyze and fail on critical or high vulnerabilities
        //         sh 'docker-scout cves $IMAGE_TAG --exit-code --only-severity critical,high'
        //     }
        // }
        stage ("Deploy to Container") {
            steps {
                sh 'docker run -d --name zomato -p 3000:3000 kastrov/zomato:latest'
            }
        }
    }
    // post {
    // always {
    //     emailext attachLog: true,
    //         subject: "'${currentBuild.result}'",
    //         body: """
    //             <html>
    //             <body>
    //                 <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
    //                     <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
    //                 </div>
    //                 <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
    //                     <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
    //                 </div>
    //                 <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
    //                     <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
    //                 </div>
    //             </body>
    //             </html>
    //         """,
    //         to: 'kastrokiran@gmail.com',
    //         mimeType: 'text/html',
    //         attachmentsPattern: 'trivy.txt'
    //     }
    // }
}
